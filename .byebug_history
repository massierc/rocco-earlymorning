continue
@message
Authorizer.new(@message['from']['id']).store_auth(@message[:text])
@auth
continue
activities
continue
    })
      selective: true,
      one_time_keyboard: true,
      resize_keyboard: true,
      keyboard: project_list,
    bot.send_message(chat_id: uid, text: 'A cosa hai lavorato oggi?', reply_markup: {
project_list
continue
q
user = User.find_by_uid(uid)
bot = Telegram.bot
bot
continue
dsa
con
continue
service
continue
@credentials
service
projects = service.get_spreadsheet_values(user.sheet_id, "#{this_month_sheet}!B:C")
user.sheet_id
projects = service.get_spreadsheet_values(user.sheet_id, "#{this_month_sheet}!B:C").values
this_month_sheet
continue
message["text"]
message["chat"]
message["chat"]["text"]
message
continue
cell_index.to_s26
cell_index
continue
q
workdays.map(&:to_i).sort.map(&:to_s).find_index("5")
workdays.map(&:to_i).sort.map(&:to_s).index_of("5")
workdays.map(&:to_i).sort.map(&:to_s)
workdays.map(&:to_i).sort
workdays.map(&:to_i)
workdays.sort
workdays
workdays << column
workdays + column
column
workdays
c
    service.update_spreadsheet_value(user.sheet_id, "C#{cell_index}", values(data[:activity][:value]), value_input_option: 'USER_ENTERED')
    service.update_spreadsheet_value(user.sheet_id, "#{this_month_sheet}!D#{cell_index}", values("=SUM(E#{cell_index}:AL#{cell_index})"), value_input_option: 'USER_ENTERED')
    service.update_spreadsheet_value(user.sheet_id, "#{this_month_sheet}!C#{cell_index}", values(data[:activity][:value]), value_input_option: 'USER_ENTERED')
    service.update_spreadsheet_value(user.sheet_id, "#{this_month_sheet}!B#{cell_index}", values(data[:project][:value]), value_input_option: 'USER_ENTERED')
    service.update_spreadsheet_value(user.sheet_id, "#{this_month_sheet}!A#{cell_index}", values(name), value_input_option: 'USER_ENTERED')
cell_index
cell_index = project_cells.find_index { |arr| arr.include? data[:project][:value] } 
cell_index = project_cells.find_index { |arr| arr.include? data[:project][:value] } + 2
cell_index
continue
cell_index
continue
a.find_index { |arr| arr.include? data[:project][:value] }
a.find_index { |arr| arr == data[:project][:value] }
a.find_index { |arr| arr.include? [data[:project][:value]] }
a.find_index { |arr| arr == [data[:project][:value]] }
a = project_cells
project_cells
project_cells.find_index { |arr| arr == [data[:project][:value]] }
project_cells.find_index { |arr| arr.compact == [data[:project][:value]] }
data
continue
                },
                  endIndex: 2,
                  startIndex: 1,
                  dimension: 'ROWS',
                  sheetId: user.sheet_id,
range: {
              })
                inheritBefore: false
                },
                  endIndex: 2,
                  startIndex: 1,
                  dimension: 'ROWS',
                  sheetId: user.sheet_id,
                range: {
    requests.push(update_sheet_properties: {
              }
                inheritBefore: false
                },
                  endIndex: 2
                  startIndex: 1,
                  dimension: 'ROWS',
                  sheetId: user.sheet_id,
                range: {
update_sheet_properties: {
    })
      }
        inheritBefore: false
        },
          endIndex: 2
          startIndex: 1,
          dimension: "ROWS",
          sheetId: user.sheet_id,
        range: {
      update_sheet_properties: {
    requests.push({
    requests = []
    })
      }
        inheritBefore: false
        },
          endIndex: 2
          startIndex: 1,
          dimension: "ROWS",
          sheetId: user.sheet_id,
        range: {
      update_sheet_properties: {
    requests.push({
    requests = []
user = User.first
user
service.insert_dimension
service
a
project_cells.find_index { |arr| arr == [project, activity] }
activity
project
continue
user_service.project_cells(normalized=true)
user_service.project_cells
continue
user_service.project_cellsc
user_service.project_cells
user_service.workday?
user_service
quit
continue
user = User.find_by_uid(uid)
user
User.first
User.connection
User.first
continue
@authorizer.methods
@authorizer.client_id
@authorizer.to_json
@authorizer.methods
@authorizer.client_id
@authorizer.get_credentials("66789010695-cngt8g16gheqak66dlq6i7e8pt262mlh.apps.googleusercontent.com")
@authorizer.get_credentials(@user_id)
@authorizer.get_credentials
@authorizer
@¢redentials
    @credentials = @authorizer.get_credentials(@user_id)
    @authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
@user_id
authorizer
    @credentials = authorizer.get_credentials(@user_id)
    @user_id = 'default'
    @authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
    token_store = Google::Auth::Stores::FileTokenStore.new(file: credentials_path)
    client_id = Google::Auth::ClientId.from_file(client_secrets_path)
    FileUtils.mkdir_p(File.dirname(credentials_path))
    scope = Google::Apis::SheetsV4::AUTH_SPREADSHEETS
    credentials_path = File.join('credentials/', "#{@username}.yaml")
    client_secrets_path = './config/client_secret.json'
    @application_name = 'Aurora'
    @oob_uri = 'urn:ietf:wg:oauth:2.0:oob'
    @username = username
@credentials
@credentials.fetch_access_token!({})
User.forst
User
config.configure
config = AppConfigurator.new
continue
@authorizer.methods
@authorizer.client_id
@authorizer.to_json
@authorizer.methods
@authorizer.client_id
@authorizer.get_credentials("66789010695-cngt8g16gheqak66dlq6i7e8pt262mlh.apps.googleusercontent.com")
@authorizer.get_credentials(@user_id)
@authorizer.get_credentials
@authorizer
@¢redentials
    @credentials = @authorizer.get_credentials(@user_id)
    @authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
@user_id
authorizer
    @credentials = authorizer.get_credentials(@user_id)
    @user_id = 'default'
    @authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
    token_store = Google::Auth::Stores::FileTokenStore.new(file: credentials_path)
    client_id = Google::Auth::ClientId.from_file(client_secrets_path)
    FileUtils.mkdir_p(File.dirname(credentials_path))
    scope = Google::Apis::SheetsV4::AUTH_SPREADSHEETS
    credentials_path = File.join('credentials/', "#{@username}.yaml")
    client_secrets_path = './config/client_secret.json'
    @application_name = 'Aurora'
    @oob_uri = 'urn:ietf:wg:oauth:2.0:oob'
    @username = username
@credentials
@credentials.fetch_access_token!({})
